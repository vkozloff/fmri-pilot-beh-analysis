#Combine the visual files into visual_data_frame
for (vfile in visual_files){visual_data_frame <- append(visual_data_frame, list(eval(parse(text=vfile))))}
visual_data_frame <- do.call(rbind.data.frame, visual_data_frame)
# Rename expName column as 'domain'
names(visual_data_frame)[names(visual_data_frame) == 'expName'] <- 'domain'
# List unique participant IDs for this condition
list_part_id <- unique(auditory_data_frame$PartID)
# List unique tasks for this condition
list_tasks <- lapply(unique(auditory_data_frame$task), as.character)
# Separate SSL and TSL
ssl <- (auditory_data_frame[ which(auditory_data_frame$task=="SSL"),])
tsl <- (auditory_data_frame[ which(auditory_data_frame$task=="TSL"),])
# Set up data frame to hold accuracies
accuracy <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task<- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt, rt_slope, upper bound, and lower bound
for(id in list_part_id){
for (t in list_tasks){
if (t=="SSL"){
modality <- append (modality, "linguistic")}
if (t=="TSL")
{modality <- append (modality, "non-linguistic")}
part_id <- append(part_id, id)
domain <- append(domain, "auditory")
task <- append(task, as.character(t))
accuracy <- append(accuracy, round(mean(auditory_data_frame[ which(auditory_data_frame$PartID==id
& auditory_data_frame$task== t), ]$key_resp.corr), digits =3))
}
}
# Combine data for each participant
auditory_accuracies <- data.frame(part_id, task, domain, modality, accuracy)
# List unique participant IDs for this condition
list_part_id <- unique(visual_data_frame$PartID)
# List unique tasks for this condition
list_tasks <- lapply(unique(visual_data_frame$task), as.character)
# Separate lsl and vsl
lsl <- (visual_data_frame[ which(visual_data_frame$task=="lsl"),])
vsl <- (visual_data_frame[ which(visual_data_frame$task=="vsl"),])
# Set up data frame to hold accuracies
accuracy <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task<- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt, rt_slope, upper bound, and lower bound
for(id in list_part_id){
for (t in list_tasks){
if (t=="LSL"){
modality <- append (modality, "linguistic")}
if (t=="VSL")
{modality <- append (modality, "non-linguistic")}
part_id <- append(part_id, id)
domain <- append(domain, "visual")
task <- append(task, as.character(t))
accuracy <- append(accuracy, round(mean(visual_data_frame[ which(visual_data_frame$PartID==id
& visual_data_frame$task== t), ]$key_resp.corr), digits =3))
}
}
# Combine data for each participant
visual_accuracies <- data.frame(part_id, task, domain, modality, accuracy)
View(visual_accuracies)
View(auditory_accuracies)
# Move to folder from GitHub (Mac when folder is on desktop)
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/4_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# Set up auditory input file path
auditory_input_path <- ("../original_data/auditory/")
auditory_files<- list.files(path=auditory_input_path, pattern="*.csv")
# Move to folder from GitHub (Mac when folder is on desktop)
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/4_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# Set up auditory input file path
auditory_input_path <- ("../original_data/auditory/")
auditory_files<- list.files(path=auditory_input_path, pattern="*.csv")
# Separate tsl and ssl file paths
ssl_files <- list.files(path=auditory_input_path, pattern="*2.csv")
tsl_files <- list.files(path=auditory_input_path, pattern="*4.csv")
# Set up audiotry ouput file path
auditory_output_path <- "../cleaned_data/auditory/"
# Set up visual file path
visual_input_path <- ("../original_data/visual/")
visual_files<- list.files(path=visual_input_path, pattern="*.csv")
# Separate vsl and lsl file paths
vsl_files <- list.files(path=visual_input_path, pattern="*6.csv")
# Move to folder from GitHub (Mac when folder is on desktop)
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/4_runs/scripts/")
# Move to folder from GitHub (Mac when folder is on desktop)
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/4_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# Set up auditory input file path
auditory_input_path <- ("../original_data/auditory/")
auditory_files<- list.files(path=auditory_input_path, pattern="*.csv")
# Separate tsl and ssl file paths
ssl_files <- list.files(path=auditory_input_path, pattern="*2.csv")
tsl_files <- list.files(path=auditory_input_path, pattern="*4.csv")
# Set up audiotry ouput file path
auditory_output_path <- "../cleaned_data/auditory/"
# Set up visual file path
visual_input_path <- ("../original_data/visual/")
visual_files<- list.files(path=visual_input_path, pattern="*.csv")
# Separate vsl and lsl file paths
lsl_files <- list.files(path=visual_input_path, pattern="*2.csv")
vsl_files <- list.files(path=visual_input_path, pattern="*4.csv")
# Set up visual output file path
visual_output_path <- "../cleaned_data/visual/"
# tsl: create a new file containing only the relevant columns in the output folder
tsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("key_resp_6.corr", "Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'key_resp_6.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("non-linguistic",nrow(newdata))
# Add task
newdata$task <- rep("TSL",nrow(newdata))
#Write file
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all tsl files
for (file in tsl_files)
{
tsl_cleaning(paste0(auditory_input_path,file))
}
# ssl: create a new file containing only the relevant columns in the output folder
ssl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("linguistic",nrow(newdata))
# Add task
newdata$task <- rep("SSL",nrow(newdata))
# Write file
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all ssl files
for (file in ssl_files)
{
ssl_cleaning(paste0(auditory_input_path,file))
}
# lsl: create a new file containing only the relevant columns in the output folder
lsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("linguistic",nrow(newdata))
# Add task
newdata$task <- rep("LSL",nrow(newdata))
# Write file
this_path<-file.path(visual_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all lsl files
for (file in lsl_files)
{
lsl_cleaning(paste0(visual_input_path,file))
}
# vsl: create a new file containing only the relevant columns in the output folder
vsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("non-linguistic",nrow(newdata))
# Add task
newdata$task <- rep("VSL",nrow(newdata))
# Write file
this_path<-file.path(visual_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all vsl files
for (file in vsl_files)
{
vsl_cleaning(paste0(visual_input_path,file))
}
# Move to folder from GitHub (Mac when folder is on desktop)
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/4_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# Set up auditory input file path
auditory_input_path <- ("../original_data/auditory/")
auditory_files<- list.files(path=auditory_input_path, pattern="*.csv")
# Separate tsl and ssl file paths
ssl_files <- list.files(path=auditory_input_path, pattern="*2.csv")
tsl_files <- list.files(path=auditory_input_path, pattern="*4.csv")
# Set up audiotry ouput file path
auditory_output_path <- "../cleaned_data/auditory/"
# Set up visual file path
visual_input_path <- ("../original_data/visual/")
visual_files<- list.files(path=visual_input_path, pattern="*.csv")
# Separate vsl and lsl file paths
lsl_files <- list.files(path=visual_input_path, pattern="*2.csv")
vsl_files <- list.files(path=visual_input_path, pattern="*4.csv")
# Set up visual output file path
visual_output_path <- "../cleaned_data/visual/"
# tsl: create a new file containing only the relevant columns in the output folder
tsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("key_resp_6.corr", "Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'key_resp_6.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("non-linguistic",nrow(newdata))
# Add task
newdata$task <- rep("TSL",nrow(newdata))
#Write file
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all tsl files
for (file in tsl_files)
{
tsl_cleaning(paste0(auditory_input_path,file))
}
# ssl: create a new file containing only the relevant columns in the output folder
ssl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("linguistic",nrow(newdata))
# Add task
newdata$task <- rep("SSL",nrow(newdata))
# Write file
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all ssl files
for (file in ssl_files)
{
ssl_cleaning(paste0(auditory_input_path,file))
}
# lsl: create a new file containing only the relevant columns in the output folder
lsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("linguistic",nrow(newdata))
# Add task
newdata$task <- rep("LSL",nrow(newdata))
# Write file
this_path<-file.path(visual_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all lsl files
for (file in lsl_files)
{
lsl_cleaning(paste0(visual_input_path,file))
}
# vsl: create a new file containing only the relevant columns in the output folder
vsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("non-linguistic",nrow(newdata))
# Add task
newdata$task <- rep("VSL",nrow(newdata))
# Write file
this_path<-file.path(visual_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all vsl files
for (file in vsl_files)
{
vsl_cleaning(paste0(visual_input_path,file))
}
tsl_test<-NULL
# tsl: create a new file containing only the relevant columns in the output folder
tsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("key_resp_6.corr", "Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'key_resp_6.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("non-linguistic",nrow(newdata))
# Add task
newdata$task <- rep("TSL",nrow(newdata))
#Write file
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
tsl_test<-this_path
}
for (file in tsl_files)
{
tsl_cleaning(paste0(auditory_input_path,file))
}
tsl_files
# tsl: create a new file containing only the relevant columns in the output folder
tsl_test<- tsl_files[1]
tsl_test
# tsl: create a new file containing only the relevant columns in the output folder
file<- tsl_files[1]
file
current_file <- read.csv(file)
current_file <- read.csv(tsl_files[1])
# Move to folder from GitHub (Mac when folder is on desktop)
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/4_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# Set up auditory input file path
auditory_input_path <- ("../original_data/auditory/")
auditory_files<- list.files(path=auditory_input_path, pattern="*.csv")
# Separate tsl and ssl file paths
ssl_files <- list.files(path=auditory_input_path, pattern="*2.csv")
tsl_files <- list.files(path=auditory_input_path, pattern="*4.csv")
# Set up audiotry ouput file path
auditory_output_path <- "../cleaned_data/auditory/"
# Set up visual file path
visual_input_path <- ("../original_data/visual/")
visual_files<- list.files(path=visual_input_path, pattern="*.csv")
# Separate vsl and lsl file paths
lsl_files <- list.files(path=visual_input_path, pattern="*2.csv")
vsl_files <- list.files(path=visual_input_path, pattern="*4.csv")
# Set up visual output file path
visual_output_path <- "../cleaned_data/visual/"
tsl_test<-NULL
#To test:
current_file <- read.csv(tsl_files[1])
# Apply function to all tsl files
for (file in tsl_files[1])
{
tsl_cleaning(paste0(auditory_input_path,file))
}
tsl_cleaning <- function(file) {
#To test:
#current_file <- read.csv(tsl_files[1])
current_file <- read.csv(file)
# Select relevant columns
value <- c("key_resp_6.corr", "Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'key_resp_6.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("non-linguistic",nrow(newdata))
# Add task
newdata$task <- rep("TSL",nrow(newdata))
#Write file
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
tsl_test<-this_path
}
# Apply function to all tsl files
for (file in tsl_files[1])
{
tsl_cleaning(paste0(auditory_input_path,file))
}
#for test purposes only
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis/rt_slope/6_runs/scripts/")
#for test purposes only
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/rt_slope/6_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# Prepare file paths
auditory_input_path <- "../original_data/auditory/"
auditory_files <- list.files(path=auditory_input_path, pattern="*.csv")
auditory_output_path <- "../cleaned_data/auditory/"
# create a new file containing only the relevant columns in the output folder
auditory_cleaning <- function(file) {
current_file <- read.csv(file)
value <- c("soundFile","trialnum","condition","random_block_key_resp.rt","random_block_key_resp.keys","structured_block_key_resp.rt","structured_block_key_resp.keys","starget","Run","PartID","ttarget","expName")
newdata <- current_file[value]
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all auditory files
for (file in auditory_files)
{
auditory_cleaning(paste0(auditory_input_path,file))
}
# to test
rm(list=ls())
# Prepare file paths
visual_input_path <- "../original_data/visual/"
visual_files <- list.files(path=visual_input_path, pattern="*.csv")
visual_output_path <- "../cleaned_data/visual/"
# create a new file containing only the relevant columns in the output folder
visual_cleaning <- function(file) {
current_file <- read.csv(file)
value <- c("image","trialnum","condition","l_block_trial_key_resp.keys","l_block_trial_key_resp.rt","v_block_trial_key_resp.keys","v_block_trial_key_resp.rt","vtarget","Run","PartID","ltarget","expName")
newdata <- current_file[value]
this_path<-file.path(visual_output_path, basename(test_visual_file))
write.csv(newdata, file=(this_path))
}
# Apply function to all auditory files
for (file in visual_files)
{
visual_cleaning(paste0(visual_input_path,file))
}
this_path<-file.path(visual_output_path, basename(file))
visual_cleaning <- function(file) {
current_file <- read.csv(file)
value <- c("image","trialnum","condition","l_block_trial_key_resp.keys","l_block_trial_key_resp.rt","v_block_trial_key_resp.keys","v_block_trial_key_resp.rt","vtarget","Run","PartID","ltarget","expName")
newdata <- current_file[value]
this_path<-file.path(visual_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# create a new file containing only the relevant columns in the output folder
auditory_cleaning <- function(file) {
current_file <- read.csv(file)
value <- c("soundFile","trialnum","condition","random_block_key_resp.rt","random_block_key_resp.keys","structured_block_key_resp.rt","structured_block_key_resp.keys","starget","Run","PartID","ttarget","expName")
newdata <- current_file[value]
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all auditory files
for (file in auditory_files)
{
auditory_cleaning(paste0(auditory_input_path,file))
}
# to test
rm(list=ls())
# Prepare file paths
visual_input_path <- "../original_data/visual/"
#for test purposes only
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/rt_slope/6_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# Prepare file paths
auditory_input_path <- "../original_data/auditory/"
auditory_files <- list.files(path=auditory_input_path, pattern="*.csv")
auditory_output_path <- "../cleaned_data/auditory/"
# create a new file containing only the relevant columns in the output folder
auditory_cleaning <- function(file) {
current_file <- read.csv(file)
value <- c("soundFile","trialnum","condition","random_block_key_resp.rt","random_block_key_resp.keys","structured_block_key_resp.rt","structured_block_key_resp.keys","starget","Run","PartID","ttarget","expName")
newdata <- current_file[value]
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all auditory files
for (file in auditory_files)
{
auditory_cleaning(paste0(auditory_input_path,file))
}
# Prepare file paths
visual_input_path <- "../original_data/visual/"
visual_files <- list.files(path=visual_input_path, pattern="*.csv")
visual_output_path <- "../cleaned_data/visual/"
# create a new file containing only the relevant columns in the output folder
visual_cleaning <- function(file) {
current_file <- read.csv(file)
value <- c("image","trialnum","condition","l_block_trial_key_resp.keys","l_block_trial_key_resp.rt","v_block_trial_key_resp.keys","v_block_trial_key_resp.rt","vtarget","Run","PartID","ltarget","expName")
newdata <- current_file[value]
this_path<-file.path(visual_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all auditory files
for (file in visual_files)
{
visual_cleaning(paste0(visual_input_path,file))
}
