# Move to folder from GitHub (Mac when folder is on desktop)
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/6_runs/scripts/")
# Remove objects in environment
rm(list=ls())
# Set up auditory input file path
auditory_input_path <- ("../original_data/auditory/")
auditory_files<- list.files(path=auditory_input_path, pattern="*.csv")
# Separate tsl and ssl file paths
tsl_files <- list.files(path=auditory_input_path, pattern="*6.csv")
ssl_files <- list.files(path=auditory_input_path, pattern="*3.csv")
# Set up audiotry ouput file path
auditory_output_path <- "../cleaned_data/auditory/"
# Set up visual file path
visual_input_path <- ("../original_data/visual/")
visual_files<- list.files(path=visual_input_path, pattern="*.csv")
# Separate vsl and lsl file paths
vsl_files <- list.files(path=visual_input_path, pattern="*6.csv")
lsl_files <- list.files(path=visual_input_path, pattern="*3.csv")
# Set up visual output file path
visual_output_path <- "../cleaned_data/visual/"
# tsl: create a new file containing only the relevant columns in the output folder
tsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("key_resp_6.corr", "Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'key_resp_6.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("non-linguistic",nrow(newdata))
# Add task
newdata$task <- rep("TSL",nrow(newdata))
#Write file
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all tsl files
for (file in tsl_files)
{
tsl_cleaning(paste0(auditory_input_path,file))
}
# ssl: create a new file containing only the relevant columns in the output folder
ssl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("linguistic",nrow(newdata))
# Add task
newdata$task <- rep("SSL",nrow(newdata))
# Write file
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all ssl files
for (file in ssl_files)
{
ssl_cleaning(paste0(auditory_input_path,file))
}
# lsl: create a new file containing only the relevant columns in the output folder
lsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("linguistic",nrow(newdata))
# Add task
newdata$task <- rep("LSL",nrow(newdata))
# Write file
this_path<-file.path(visual_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all lsl files
for (file in lsl_files)
{
lsl_cleaning(paste0(visual_input_path,file))
}
# vsl: create a new file containing only the relevant columns in the output folder
vsl_cleaning <- function(file) {
current_file <- read.csv(file)
# Select relevant columns
value <- c("question_key_resp.corr","Run","PartID","expName")
newdata <- current_file[value]
# Standardize "key_resp.corr" column across runs
names(newdata)[names(newdata) == 'question_key_resp.corr'] <- 'key_resp.corr'
# Remove any lines prior to test phase
newdata <- newdata[ which(!is.na(newdata$key_resp.corr)), ]
# Add domain
newdata$modality <- rep("non-linguistic",nrow(newdata))
# Add task
newdata$task <- rep("VSL",nrow(newdata))
# Write file
this_path<-file.path(visual_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all vsl files
for (file in vsl_files)
{
vsl_cleaning(paste0(visual_input_path,file))
}
# Remove objects in environment
rm(list=ls())
# NOTE: For use on Mac
auditory_path <- '~/Desktop/r_mar_7/nov_pilot/Auditory/'
#Set correct working directory
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis/rt_slope/nov_pilot/scripts/")
# Remove objects in environment
rm(list=ls())
#Set correct working directory
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis/rt_slope/nov_pilot/scripts/")
# Remove objects in environment
rm(list=ls())
printwd()
getwd()
#Set correct working directory
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis/rt_slope/nov_pilot/scripts/")
#Set correct working directory
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/nov_pilot/scripts")
# Remove objects in environment
rm(list=ls())
# NOTE: For use on Mac
auditory_path <- "../cleaned_data/auditory/"
visual_path <- "../cleaned_data/auditory/"
#Set correct working directory
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/nov_pilot/scripts")
# Remove objects in environment
rm(list=ls())
# NOTE: For use on Mac
auditory_path <- "../cleaned_data/auditory/"
visual_path <- "../cleaned_data/auditory/"
afiles <- list.files(path=auditory_path, pattern="*.csv")
vfiles <- list.files(path=visual_path, pattern = ".csv")
#Remove the underscores in file names
auditory_files <- gsub("_", "", afiles)
visual_files <- gsub("_", "", vfiles)
# Prepare auditory_data_frame to hold the files you're reading in
auditory_data_frame<-list()
# Remove the dashes in each file name read it in
for(auditory_file in afiles)
{
assign(
gsub("_", "", auditory_file),
read.csv(paste(auditory_path, auditory_file, sep="")))
}
# Combine each file with the previous files into auditory_data_frame
for (afile in auditory_files){auditory_data_frame <- append(auditory_data_frame, list(eval(parse(text=afile))))}
auditory_data_frame <- do.call(rbind.data.frame, auditory_data_frame)
# Match name of image with name of target in auditory files by removing extension from end of sound_file
auditory_data_frame$soundFile <- gsub (".wav", "", auditory_data_frame$soundFile, ignore.case=TRUE)
#Set correct working directory
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/accuracy/nov_pilot/scripts")
# Remove objects in environment
rm(list=ls())
# NOTE: For use on Mac
auditory_path <- "../cleaned_data/auditory/"
visual_path <- "../cleaned_data/auditory/"
afiles <- list.files(path=auditory_path, pattern="*.csv")
vfiles <- list.files(path=visual_path, pattern = ".csv")
#Remove the underscores in file names
auditory_files <- gsub("_", "", afiles)
visual_files <- gsub("_", "", vfiles)
# Prepare auditory_data_frame to hold the files you're reading in
auditory_data_frame<-list()
# Remove the dashes in each file name read it in
for(auditory_file in afiles)
{
assign(
gsub("_", "", auditory_file),
read.csv(paste(auditory_path, auditory_file, sep="")))
}
# Combine each file with the previous files into auditory_data_frame
for (afile in auditory_files){auditory_data_frame <- append(auditory_data_frame, list(eval(parse(text=afile))))}
auditory_data_frame <- do.call(rbind.data.frame, auditory_data_frame)
# Match name of image with name of target in auditory files by removing extension from end of sound_file
auditory_data_frame$soundFile <- gsub (".wav", "", auditory_data_frame$soundFile, ignore.case=TRUE)
View(auditory_data_frame)
#Set correct working directory
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/rt_slope/nov_pilot/scripts")
# Remove objects in environment
rm(list=ls())
# NOTE: For use on Mac
auditory_path <- "../cleaned_data/auditory/"
visual_path <- "../cleaned_data/auditory/"
afiles <- list.files(path=auditory_path, pattern="*.csv")
vfiles <- list.files(path=visual_path, pattern = ".csv")
#Remove the underscores in file names
auditory_files <- gsub("_", "", afiles)
visual_files <- gsub("_", "", vfiles)
# Prepare auditory_data_frame to hold the files you're reading in
auditory_data_frame<-list()
# Remove the dashes in each file name read it in
for(auditory_file in afiles)
{
assign(
gsub("_", "", auditory_file),
read.csv(paste(auditory_path, auditory_file, sep="")))
}
# Combine each file with the previous files into auditory_data_frame
for (afile in auditory_files){auditory_data_frame <- append(auditory_data_frame, list(eval(parse(text=afile))))}
auditory_data_frame <- do.call(rbind.data.frame, auditory_data_frame)
# Match name of image with name of target in auditory files by removing extension from end of sound_file
auditory_data_frame$soundFile <- gsub (".wav", "", auditory_data_frame$soundFile, ignore.case=TRUE)
# Convert targets and soundFile from factors to atomic variables
auditory_data_frame$ttarget<-as.character(auditory_data_frame$ttarget)
auditory_data_frame$soundFile<-as.character(auditory_data_frame$soundFile)
auditory_data_frame$starget<-as.character(auditory_data_frame$starget)
# Rename expName column as "modality"
names(auditory_data_frame)[names(auditory_data_frame) == 'expName'] <- 'modality'
# Prepare visual_data_frame to hold the files you're reading in
visual_data_frame <- data.frame()
visual_data_frame<-list()
# Remove the dashes from each file name and read it in
for(visual_file in vfiles)
{
assign(
gsub("_", "", visual_file),
read.csv(paste(visual_path, visual_file, sep="")))
}
#Combine the visual files into visual_data_frame
for (vfile in visual_files){visual_data_frame <- append(visual_data_frame, list(eval(parse(text=vfile))))}
visual_data_frame <- do.call(rbind.data.frame, visual_data_frame)
visual_data_frame$image <- gsub ("Alien", "", visual_data_frame$image, ignore.case=TRUE)
visual_data_frame$image <- gsub (".bmp", "", visual_data_frame$image, ignore.case=TRUE)
View(auditory_data_frame)
# Remove objects in environment
rm(list=ls())
# NOTE: For use on Mac
auditory_path <- "../cleaned_data/auditory/"
visual_path <- "../cleaned_data/auditory/"
afiles <- list.files(path=auditory_path, pattern="*.csv")
vfiles <- list.files(path=visual_path, pattern = ".csv")
#Remove the underscores in file names
auditory_files <- gsub("_", "", afiles)
visual_files <- gsub("_", "", vfiles)
# Prepare auditory_data_frame to hold the files you're reading in
auditory_data_frame<-list()
# Remove the dashes in each file name read it in
for(auditory_file in afiles)
{
assign(
gsub("_", "", auditory_file),
read.csv(paste(auditory_path, auditory_file, sep="")))
}
# Combine each file with the previous files into auditory_data_frame
for (afile in auditory_files){auditory_data_frame <- append(auditory_data_frame, list(eval(parse(text=afile))))}
auditory_data_frame <- do.call(rbind.data.frame, auditory_data_frame)
# Match name of image with name of target in auditory files by removing extension from end of sound_file
auditory_data_frame$soundFile <- gsub (".wav", "", auditory_data_frame$soundFile, ignore.case=TRUE)
# Convert targets and soundFile from factors to atomic variables
auditory_data_frame$ttarget<-as.character(auditory_data_frame$ttarget)
auditory_data_frame$soundFile<-as.character(auditory_data_frame$soundFile)
auditory_data_frame$starget<-as.character(auditory_data_frame$starget)
# Rename expName column as "modality"
names(auditory_data_frame)[names(auditory_data_frame) == 'expName'] <- 'modality'
# Prepare visual_data_frame to hold the files you're reading in
visual_data_frame <- data.frame()
visual_data_frame<-list()
# Remove the dashes from each file name and read it in
for(visual_file in vfiles)
{
assign(
gsub("_", "", visual_file),
read.csv(paste(visual_path, visual_file, sep="")))
}
#Combine the visual files into visual_data_frame
for (vfile in visual_files){visual_data_frame <- append(visual_data_frame, list(eval(parse(text=vfile))))}
View(visual_data_frame)
visual_data_frame <- do.call(rbind.data.frame, visual_data_frame)
View(visual_data_frame)
#for test purposes only
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis/rt_slope/nov_pilot/scripts/")
getwd()
#for test purposes only
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/rt_slope/nov_pilot/scripts/")
# Remove objects in environment
rm(list=ls())
# Prepare file paths
auditory_input_path <- "../original_data/auditory/"
auditory_files <- list.files(path=auditory_input_path, pattern="*.csv")
auditory_output_path <- "../cleaned_data/auditory/"
# create a new file containing only the relevant columns in the output folder
auditory_cleaning <- function(file) {
current_file <- read.csv(file)
value <- c("soundFile","trialnum","condition","random_block_key_resp.rt","random_block_key_resp.keys","structured_block_key_resp.rt","structured_block_key_resp.keys","starget","Run","PartID","ttarget","expName")
newdata <- current_file[value]
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all auditory files
for (file in auditory_files)
{
auditory_cleaning(paste0(auditory_input_path,file))
}
# to test
rm(list=ls())
#for test purposes only
setwd("/Users/qigroup/Desktop/fmri-pilot-beh-analysis-master/rt_slope/nov_pilot/scripts/")
# Remove objects in environment
rm(list=ls())
# Prepare file paths
auditory_input_path <- "../original_data/auditory/"
auditory_files <- list.files(path=auditory_input_path, pattern="*.csv")
auditory_output_path <- "../cleaned_data/auditory/"
# create a new file containing only the relevant columns in the output folder
auditory_cleaning <- function(file) {
current_file <- read.csv(file)
value <- c("soundFile","trialnum","condition","random_block_key_resp.rt","random_block_key_resp.keys","structured_block_key_resp.rt","structured_block_key_resp.keys","starget","Run","PartID","ttarget","expName")
newdata <- current_file[value]
this_path<-file.path(auditory_output_path, basename(file))
write.csv(newdata, file=(this_path))
}
# Apply function to all auditory files
for (file in auditory_files)
{
auditory_cleaning(paste0(auditory_input_path,file))
}
